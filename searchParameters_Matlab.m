%% Import data from text file.
% Script for importing data from the following text file:
%
%    H:\private\code\abaqus\inputAbaqus_Matlab.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/09/14 17:19:57

%% Initialize variables.
filename = 'H:\private\code\abaqus\inputAbaqus_Matlab.txt';
delimiter = ';';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22,23,29,30,31,32,33,34,35,36,37,38,39,40,41,44,47,48,49,50]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22,23,29,30,31,32,33,34,35,36,37,38,39,40,41,44,47,48,49,50]);
rawCellColumns = raw(:, [2,3,17,18,24,25,26,27,28,42,43,45,46]);


%% Create output variable
dataImport = table;
dataImport.Iter = cell2mat(rawNumericColumns(:, 1));
dataImport.typeOfModel = rawCellColumns(:, 1);
dataImport.jobName = rawCellColumns(:, 2);
dataImport.E_ribOverE1 = cell2mat(rawNumericColumns(:, 2));
dataImport.E1OverE2_simpleModel = cell2mat(rawNumericColumns(:, 3));
dataImport.N = cell2mat(rawNumericColumns(:, 4));
dataImport.M = cell2mat(rawNumericColumns(:, 5));
dataImport.r = cell2mat(rawNumericColumns(:, 6));
dataImport.B = cell2mat(rawNumericColumns(:, 7));
dataImport.L = cell2mat(rawNumericColumns(:, 8));
dataImport.cutGap_x = cell2mat(rawNumericColumns(:, 9));
dataImport.cutGap_y = cell2mat(rawNumericColumns(:, 10));
dataImport.Cbox_t = cell2mat(rawNumericColumns(:, 11));
dataImport.rib_t = cell2mat(rawNumericColumns(:, 12));
dataImport.rib_t_inner = cell2mat(rawNumericColumns(:, 13));
dataImport.innerRibs_n = cell2mat(rawNumericColumns(:, 14));
dataImport.rootRibShape = rawCellColumns(:, 3);
dataImport.tipRibShape = rawCellColumns(:, 4);
dataImport.rib_a = cell2mat(rawNumericColumns(:, 15));
dataImport.C3 = cell2mat(rawNumericColumns(:, 16));
dataImport.wingBoxLength = cell2mat(rawNumericColumns(:, 17));
dataImport.eOverB = cell2mat(rawNumericColumns(:, 18));
dataImport.tChiral = cell2mat(rawNumericColumns(:, 19));
dataImport.typeLoad = rawCellColumns(:, 5);
dataImport.typeBC = rawCellColumns(:, 6);
dataImport.additionalBC = rawCellColumns(:, 7);
dataImport.conditionNodesInnerLattice = rawCellColumns(:, 8);
dataImport.dofContraint = rawCellColumns(:, 9);
dataImport.displImposed = cell2mat(rawNumericColumns(:, 20));
dataImport.ForceMagnitude = cell2mat(rawNumericColumns(:, 21));
dataImport.momentMagnitude = cell2mat(rawNumericColumns(:, 22));
dataImport.forceXStart = cell2mat(rawNumericColumns(:, 23));
dataImport.forceXEnd = cell2mat(rawNumericColumns(:, 24));
dataImport.forceXn = cell2mat(rawNumericColumns(:, 25));
dataImport.forceZPos = cell2mat(rawNumericColumns(:, 26));
dataImport.courseSize = cell2mat(rawNumericColumns(:, 27));
dataImport.fineSize = cell2mat(rawNumericColumns(:, 28));
dataImport.maxTimeIncrement = cell2mat(rawNumericColumns(:, 29));
dataImport.initialTimeIncrement = cell2mat(rawNumericColumns(:, 30));
dataImport.minTimeIncrement = cell2mat(rawNumericColumns(:, 31));
dataImport.maxNumInc = cell2mat(rawNumericColumns(:, 32));
dataImport.executeJob = rawCellColumns(:, 10);
dataImport.executePostProc = rawCellColumns(:, 11);
dataImport.damp = cell2mat(rawNumericColumns(:, 33));
dataImport.typeAnalysis = rawCellColumns(:, 12);
dataImport.typeAbaqus = rawCellColumns(:, 13);
dataImport.C2r = cell2mat(rawNumericColumns(:, 34));
dataImport.s1 = cell2mat(rawNumericColumns(:, 35));
dataImport.L1 = cell2mat(rawNumericColumns(:, 36));
dataImport.r1 = cell2mat(rawNumericColumns(:, 37));

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns;

%% 
C2r = dataImport.C2r;
s = dataImport.s1;

M = dataImport.M;
N = dataImport.N;
cutY = dataImport.cutGap_y; %mm

r0 = dataImport.r1;

L0 = dataImport.L1;

x0 = [sqrt(L0), sqrt(r0)];

% C3 - (2.*(M-1)*sqrt( (3./4)* ( (2.*r0)^2 + (2.*L0)^2 ) )) - (2 * (r0 + cutY) )
% s - ((N - 1)*sqrt( (2.*r0)^2 + (2.*L0)^2  ))

options = optimoptions('fsolve','Display','iter');
dimSolv = fsolve(@(x)dim(x, N, M, s, C2r, cutY), x0, options);

L_found = dimSolv(1)^2;
r_found = dimSolv(2)^2;
fprintf(['L:' num2str(L_found) '\n'])

fprintf(['r:' num2str(r_found) '\n'])

if exist('findrAndL_found', 'file') ~= 0
    delete 'findrAndL_found.txt'
end
fileID = fopen('findrAndL_found.txt', 'w');

fprintf(fileID, ['r' '\n']);
fprintf(fileID, [num2str(r_found) '\n']);
fprintf(fileID, ['L' '\n']);
fprintf(fileID, [num2str(L_found) '\n']);

fclose(fileID);